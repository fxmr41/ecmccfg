#- ============================================================================
#- Motor record init
#- ============================================================================

{%- set axisFlags = 6 %}
{%- if axis.autoEnable is defined %}
    {%- if (axis.autoEnable.enableTimeout is defined) or (axis.autoEnable.disableTime is defined) %}
         #- turn of motor record auto enable (bit 1 = 0)
         {%- set axisFlags = 4 %}
    {%- endif %}

    {%- if (axis.autoEnable.atStartup is defined) and (axis.autoEnable.atStartup == true) %}
       #-  Set enable at axis create bit (bit 1 in axisFlags)
       {%- set axisFlags = axisFlags + 1 %}
    {%- endif %}
{%- endif %}

#-  Default to sync softlimits
{%- set syncEcmcMRSofLim = 0 %}
{%- if (epics.motorRecord.syncSoftLimits is defined) and (epics.motorRecord.syncSoftLimits == true) %}
    {% set syncEcmcMRSofLim = 1 %}
{%- endif %}

${ECMC_MR_MODULE="ecmcMotorRecord"}CreateAxis(${ECMC_MOTOR_PORT}, {{ axis.id }}, ${ECMC_AXIS_FLAGS={{ axisFlags }}}, "syncSoftLims={{ syncEcmcMRSofLim }};{{ axis.parameters|default("") }}")
epicsEnvUnset(ECMC_AXIS_FLAGS)

{# jog velocity #}
{%- if (trajectory.jog is defined) and (trajectory.jog.velocity is defined) %}
    {%- set jogVelocity = trajectory.jog.velocity %}
{%- else %}
    {%- set jogVelocity = trajectory.axis.velocity / 10.0 %}
{%- endif %}

{# jog acceleration #}
{%- if (trajectory.jog is defined) and (trajectory.jog.acceleration is defined) %}
    {%- set jogAcceleration = trajectory.jog.acceleration %}
{%- else %}
    {%- set jogAcceleration = trajectory.axis.acceleration %}
{%- endif %}

{%- if monitoring is defined %}
    {%- if monitoring.target is defined %}
        {%- set rdbd = monitoring.target.tolerance %}
    {%- else %}
        {%- set rdbd = 0 %}
    {%- endif %}
{%- else %}
    {%- set rdbd = 0 %}
{%- endif %}

{%- set DHLM = 0.0 %}
{%- set DLLM = 0.0 %}
{%- if (softlimits is defined) and (softlimits.enable is defined) and (softlimits.enable == true) %}
    {%- if (softlimits.forward is defined) and (softlimits.forwardEnable == true) %}
        {%- set DHLM = softlimits.forward %}
        epicsEnvSet(ECMC_MR_TEMP_FIELDS,"${ECMC_MR_TEMP_FIELDS=""}HLM={{ DHLM }},DHLM_En={{ softlimits.forwardEnable|int }},")
    {%- endif %}
    {%- if (softlimits.backward is defined) and (softlimits.backwardEnable == true) %}
        {%- set DLLM = softlimits.backward %}
        epicsEnvSet(ECMC_MR_TEMP_FIELDS,"${ECMC_MR_TEMP_FIELDS=""}LLM={{ DLLM }},DLLM_En={{ softlimits.backwardEnable|int}},")
    {%- endif %}
{%- endif %}

#- VMAX
{%- if monitoring.velocity is defined %}
    {%- if monitoring.velocity.enable|default(0)|int %}
        epicsEnvSet(ECMC_MR_TEMP_FIELDS,"${ECMC_MR_TEMP_FIELDS=""}VMAX={{ monitoring.velocity.max }},")
    {%- endif %}
{%- endif %}

#- Motor record controller params are scaled by a factor 0.01 (since they only allow a value 0..1)
epicsEnvSet(ECMC_MR_PCOF,0)
epicsEnvSet(ECMC_MR_ICOF,0)
epicsEnvSet(ECMC_MR_DCOF,0)
{%- if controller is defined %}
    ecmcEpicsEnvSetCalc(ECMC_MR_PCOF,'clamp(0.0,{{ controller.Kp|default(0)|float }}/100.0,1.0)','%lf')
    ecmcEpicsEnvSetCalc(ECMC_MR_ICOF,'clamp(0,{{ controller.Ki|default(0)|float }}/100.0,1.0)','%lf')
    ecmcEpicsEnvSetCalc(ECMC_MR_DCOF,'clamp(0,{{ controller.Kd|default(0)|float }}/100.0,1.0)','%lf')
{%- endif %}

{%- if drive is defined %}
    ecmcEpicsEnvSetCalc(ECMC_TEMP_SREV,'abs({{ drive.denominator|default(1)|int }})')
    ecmcEpicsEnvSetCalc(ECMC_TEMP_UREV,'abs({{ drive.numerator|default(1) }})')
{%- else %}
    ecmcEpicsEnvSetCalc(ECMC_TEMP_SREV,'abs(1)')
    ecmcEpicsEnvSetCalc(ECMC_TEMP_UREV,'abs(1)')
{%- endif %}


ecmcFileExist(ecmcMotorRecord.template,1,1)
dbLoadRecords(ecmcMotorRecord.template,"PREFIX=${ECMC_PREFIX},MOTOR_NAME={{ epics.name }},MOTOR_PORT=${ECMC_MOTOR_PORT},ECMC_PORT=${ECMC_ASYN_PORT},AXIS_NO={{ axis.id }},DESC='{{ epics.motorRecord.description|default("") }}',EGU={{ epics.unit }},PREC={{ epics.precision }},VELO={{ trajectory.axis.velocity }},JVEL={{ jogVelocity }},JAR={{ jogAcceleration }},ACCS={{ trajectory.axis.acceleration }},RDBD={{ rdbd }},DLLM={{ DLLM|float }},DHLM={{ DHLM|float }},SREV=$(ECMC_TEMP_SREV),UREV=$(ECMC_TEMP_UREV),TWV={{ axis.tweakDist|default(1.0)|float }},{{ epics.motorRecord.fieldInit|default("") }},${ECMC_MR_TEMP_FIELDS=""},PCOF=${ECMC_MR_PCOF},ICOF=${ECMC_MR_ICOF},DCOF=${ECMC_MR_DCOF},SYNC_DXLM={{ syncEcmcMRSofLim }}")
epicsEnvUnset(ECMC_TEMP_UREV)
epicsEnvUnset(ECMC_TEMP_SREV)
epicsEnvUnset(ECMC_MR_TEMP_FIELDS)
epicsEnvUnset(ECMC_MR_PCOF)
epicsEnvUnset(ECMC_MR_ICOF)
epicsEnvUnset(ECMC_MR_DCOF)

#- PVT
{%- if epics.motorRecord.pvt is defined %}

    {%- if epics.motorRecord.pvt.npoints is defined %}
        {%- set pvtNpoints = epics.motorRecord.pvt.npoints %}
    {%- else %}
        {%- set pvtNpoints = 0 %}
    {%- endif %}

    {%- if epics.motorRecord.pvt.nreadback is defined %}
        {%- set pvtNreadback = epics.motorRecord.pvt.nreadback %}
    {%- else %}
        {%- set pvtNreadback = 0 %}
    {%- endif %}

    epicsEnvSet(ECMC_MR_PVT_FIRST_AXIS_ID,${ECMC_MR_PVT_FIRST_AXIS_ID={{ axis.id }}})
    dbLoadRecords(ecmcProfileMoveAxis.template,"P=${ECMC_PREFIX},M={{ epics.name }}-PVT-,R=,PORT=${ECMC_MOTOR_PORT},ADDR={{ axis.id }},PREC={{ epics.precision }},NPOINTS={{ pvtNpoints }},NREADBACK={{ pvtNreadback }}")
    #- Enable PVT for axis
    ecmcEnablePVTForAxis(${ECMC_MOTOR_PORT},{{ axis.id }},1)
    #- Save some vars for loading of ecmcProfileMoveController.template in setAppMode.cmd
    ecmcEpicsEnvSetCalcTernary(ECMC_MR_PVT_MAX_RB_POINTS_IN_USE,"${ECMC_MR_PVT_MAX_RB_POINTS_IN_USE=0}<{{ pvtNreadback }}",{{ pvtNreadback }} ,${ECMC_MR_PVT_MAX_RB_POINTS_IN_USE=0})
    ecmcEpicsEnvSetCalcTernary(ECMC_MR_PVT_MAX_POINTS_IN_USE,"${ECMC_MR_PVT_MAX_POINTS_IN_USE=0}<{{ pvtNpoints }}",{{ pvtNpoints }} ,${ECMC_MR_PVT_MAX_POINTS_IN_USE=0})
    ecmcEpicsEnvSetCalc(ECMC_MR_PVT_AXES_COUNT_IN_USE,"${ECMC_MR_PVT_AXES_COUNT_IN_USE=0}+1")
    #- Load cfg records for PVT axis (enable auto gui)
    dbLoadRecords(ecmcProfileMoveMCUAxis.template,"IOC=$(IOC),DEV=${DEV=$(IOC)},AXIS_NAME={{ epics.name }},PVT_AXIS_NO=$(ECMC_MR_PVT_AXES_COUNT_IN_USE),AXIS_NO={{ axis.id }}")
{%- endif %}

#- ############################################################################
#- Motor record: homing
#- ############################################################################
{%- if (homing is defined) and (encoder.homing is defined) %}
   # ERROR: Duplicate homing parameters identified (homing and encoder.homing)
   #        Homing parameters can only be defined at one place
   ecmcExit
{%- endif %}

{%- if (encoder.homing is defined) or (homing is defined) %}
    ecmcFileExist(ecmcMotorRecordhome.template,1,1)
    dbLoadRecords(ecmcMotorRecordhome.template, "PREFIX=${ECMC_PREFIX}, MOTOR_NAME='{{ epics.name }}', MOTOR_PORT=${ECMC_MOTOR_PORT}, AXIS_NO={{ axis.id }},HOMEPOS=${HOME_POS=0},HVELTO=${VEL_TO_CAM=0},HVELFRM=${VEL_FRM_CAM=0},HOMEACC=${ACC=0},HOMEDEC=${DEC=0}")
{%- endif %}
