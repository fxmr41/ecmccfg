###############################################################################################
# For help on syntax, variables and functions, please read the file: "plcSyntaxHelp.plc"
#
# PLC Functionality Demo:
#   Test raspi plugin
#   Write to WiringPi pin 0
#   Readback on WiringPi pin 2
#
#   Note: WiringPi pin 0 is physical pin 11 
#         WiringPi pin 2 is physical pin 13
#         Gnd is on physical pin 9
#         Use: "$ gpio readall" to get info on pins.
#
#   Connect a LED:
#         1. Connect a LED and a 330 Ohm resistor in series between pin 11 (output)  and 9 (gnd)
#         2. Connect a between output and input (physical 11 and 13)
#

# Initiation
if(plc${PLC_ID=0}.firstscan) {
  ${DBG=#}println('========= rpi config pins ==================');
  rpi_pinMode(0,1); # Set pin 0 to output
  # Print constants
  ${DBG=#}println('========= rpi plugin constants =============');
  ${DBG=#}println('rpi_LOW               = ',rpi_LOW);
  ${DBG=#}println('rpi_HIGH              = ',rpi_HIGH);
  ${DBG=#}println('rpi_INPUT             = ',rpi_INPUT);
  ${DBG=#}println('rpi_OUTPUT            = ',rpi_OUTPUT);
  ${DBG=#}println('rpi_PWM_OUTPUT        = ',rpi_PWM_OUTPUT);
  ${DBG=#}println('rpi_GPIO_CLOCK        = ',rpi_GPIO_CLOCK);
  ${DBG=#}println('rpi_SOFT_PWM_OUTPUT   = ',rpi_SOFT_PWM_OUTPUT);
  ${DBG=#}println('rpi_SOFT_TONE_OUTPUT  = ',rpi_SOFT_TONE_OUTPUT);
  ${DBG=#}println('rpi_PWM_TONE_OUTPUT   = ',rpi_PWM_TONE_OUTPUT);
  ${DBG=#}println('rpi_PUD_OFF           = ',rpi_PUD_OFF);
  ${DBG=#}println('rpi_PUD_DOWN          = ',rpi_PUD_DOWN);
  ${DBG=#}println('rpi_PUD_UP            = ',rpi_PUD_UP);
  ${DBG=#}println('rpi_WPI_MODE_PINS     = ',rpi_WPI_MODE_PINS);
  ${DBG=#}println('rpi_WPI_MODE_GPIO     = ',rpi_WPI_MODE_GPIO);
  ${DBG=#}println('rpi_WPI_MODE_GPIO_SYS = ',rpi_WPI_MODE_GPIO_SYS);
  ${DBG=#}println('rpi_WPI_MODE_PHYS     = ',rpi_WPI_MODE_PHYS);
  ${DBG=#}println('rpi_WPI_MODE_PIFACE   = ',rpi_WPI_MODE_PIFACE);
};

${DBG=#}println('========= rpi plugin functions =============');
static.pinZeroValue:=not(static.pinZeroValue);
${DBG=#}println('Pin 0: rpi_digitalWrite(0      , ', static.pinZeroValue,')');

# Measure exe time for rpi_writeDigital() and rpi_readDigital()
static.before:=ec_get_time();
rpi_digitalWrite(0,static.pinZeroValue);
static.middle:=ec_get_time();
static.digRead:=rpi_digitalRead(2);
static.after:=ec_get_time();
${DBG=#}println('Pin 2: rpi_digitalRead(2)      : ', static.digRead);
${DBG=#}println('rpi_writeDigital exe time [ns] : ', static.middle-static.before);
${DBG=#}println('rpi_digitalRead exe time [ns]  : ', static.after-static.middle);

static.test:=static.test+1;
${DBG=#}println('Total changes                  : ', static.test);
