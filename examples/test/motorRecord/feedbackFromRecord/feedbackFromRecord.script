##############################################################################
## Use record as feedback for motor record. Motor record fields of intrest:
## RTRY : Max retry count
## RMOD : Retry Mode
## UEIP : Use encoder if present
## RDBD : Readtry deadband 
## URIP : Use RDBL Link If Present
## RDBL : Readback link (position form EPICS variable)
##
## Example based on  ESS crate of type MCU1021 with coupler.
##

require ecmccfg

#Configure EL1018 digital input terminal
${SCRIPTEXEC} ${ecmccfg_DIR}addSlave.cmd, "SLAVE_ID=1, HW_DESC=EL1018"

#Configure EL2808 digital output terminal
${SCRIPTEXEC} ${ecmccfg_DIR}addSlave.cmd, "HW_DESC=EL2808"

# Save the slave number for later
epicsEnvSet("ECMC_EC_SLAVE_NUM_DIG_OUT", "${ECMC_EC_SLAVE_NUM}")

#Configure EL5101 Incremental Encoder Interface
epicsEnvSet("ECMC_EC_SLAVE_NUM" ,3)
${SCRIPTEXEC} ${ecmccfg_DIR}addSlave.cmd, "SLAVE_ID=${ECMC_EC_SLAVE_NUM}, HW_DESC=EL5101"

#Configure EL7037 stepper drive terminal, motor 1
epicsEnvSet("ECMC_EC_SLAVE_NUM" ,8)
${SCRIPTEXEC} ${ecmccfg_DIR}configureSlave.cmd, "SLAVE_ID=${ECMC_EC_SLAVE_NUM}, HW_DESC=EL7037, CONFIG=-Motor-Nanotec-ST4118L1804-B"

#Apply hardware configuration
ecmcConfigOrDie "Cfg.EcApplyConfig(1)"

# ADDITIONAL SETUP
# Set all outputs to feed switches
ecmcConfigOrDie "Cfg.WriteEcEntryIDString(${ECMC_EC_SLAVE_NUM_DIG_OUT},binaryOutput01,1)"
ecmcConfigOrDie "Cfg.WriteEcEntryIDString(${ECMC_EC_SLAVE_NUM_DIG_OUT},binaryOutput02,1)"
ecmcConfigOrDie "Cfg.WriteEcEntryIDString(${ECMC_EC_SLAVE_NUM_DIG_OUT},binaryOutput03,1)"
ecmcConfigOrDie "Cfg.WriteEcEntryIDString(${ECMC_EC_SLAVE_NUM_DIG_OUT},binaryOutput04,1)"
ecmcConfigOrDie "Cfg.WriteEcEntryIDString(${ECMC_EC_SLAVE_NUM_DIG_OUT},binaryOutput05,1)"
ecmcConfigOrDie "Cfg.WriteEcEntryIDString(${ECMC_EC_SLAVE_NUM_DIG_OUT},binaryOutput06,1)"
ecmcConfigOrDie "Cfg.WriteEcEntryIDString(${ECMC_EC_SLAVE_NUM_DIG_OUT},binaryOutput07,1)"
ecmcConfigOrDie "Cfg.WriteEcEntryIDString(${ECMC_EC_SLAVE_NUM_DIG_OUT},binaryOutput08,1)"
# END of ADDITIONAL SETUP

## AXIS 1
epicsEnvSet("DEV",      "$(IOC)")
$(SCRIPTEXEC) $(ecmccfg_DIR)configureAxis.cmd, CONFIG=./cfg/linear_1.ax

# load simulated position (0.95* actpos)
dbLoadRecords("simEncPos.db","P=${IOC}:,AXIS_NAME=Axis1,AXIS_NO=1,PORT=MC_CPU1,ADDR=0,TIMEOUT=1,T_SMP_MS=10,TSE=-2")

iocInit()

## RTRY : Max retry count
## RMOD : Retry Mode
#- UEIP : Use encoder if present
## RDBD : Readtry deadband 
#- URIP : Use RDBL Link If Present
## RDBL : Readback link (position form EPICS variable)


dbgf ${IOC}:Axis1.RTRY
dbgf ${IOC}:Axis1.RMOD
#-dbgf ${IOC}:Axis1.UEIP
dbgf ${IOC}:Axis1.RDBD
dbgf ${IOC}:Axis1.URIP
dbgf ${IOC}:Axis1.RDBL
dbgf ${IOC}:Axis1.RRES
dbgf ${IOC}:Axis1.SREV
dbgf ${IOC}:Axis1.UREV
dbgf ${IOC}:Axis1.MRES
dbgrep *Sim*

# Torstens
dbpf ${IOC}:Axis1.SPAM 1023
#dbpf ${IOC}:Axis1.DLY 0
#dbpf ${IOC}:Axis1.RTRY 3
#dbpf ${IOC}:Axis1.RMOD 2
#dbpf ${IOC}:Axis1.RDBL $MOTOR-PosAct
#dbpf ${IOC}:Axis1.RRES 0.95
#dbpf ${IOC}:Axis1.URIP 1
#dbpf ${IOC}:Axis1.TWF 1

#asynSetTraceMask(${ECMC_ASYN_PORT}, -1, 0x11)
#asynSetTraceMask(${ECMC_MOTOR_PORT}, -1, 0x11)
